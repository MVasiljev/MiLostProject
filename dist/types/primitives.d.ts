import { ValidationError, Result } from "../core/index.js";
import { Brand } from "./branding.js";
import { Str } from "./string.js";
type RawNumber = number;
export type u8 = Brand<RawNumber, Str>;
export type u16 = Brand<RawNumber, Str>;
export type u32 = Brand<RawNumber, Str>;
export type u64 = Brand<RawNumber, Str>;
export type usize = Brand<RawNumber, Str>;
export type i8 = Brand<RawNumber, Str>;
export type i16 = Brand<RawNumber, Str>;
export type i32 = Brand<RawNumber, Str>;
export type i64 = Brand<RawNumber, Str>;
export type isize = Brand<RawNumber, Str>;
export type f32 = Brand<RawNumber, Str>;
export type f64 = Brand<RawNumber, Str>;
export declare const limits: {
    readonly u8: readonly [0, 255];
    readonly u16: readonly [0, 65535];
    readonly u32: readonly [0, 4294967295];
    readonly u64: readonly [0, number];
    readonly usize: readonly [0, number];
    readonly i8: readonly [-128, 127];
    readonly i16: readonly [-32768, 32767];
    readonly i32: readonly [-2147483648, 2147483647];
    readonly i64: readonly [number, number];
    readonly isize: readonly [number, number];
    readonly f32: readonly [-3.40282347e+38, 3.40282347e+38];
    readonly f64: readonly [number, number];
};
export declare const u8: (v: RawNumber) => u8;
export declare const u16: (v: RawNumber) => u16;
export declare const u32: (v: RawNumber) => u32;
export declare const u64: (v: RawNumber) => u64;
export declare const usize: (v: RawNumber) => usize;
export declare const i8: (v: RawNumber) => i8;
export declare const i16: (v: RawNumber) => i16;
export declare const i32: (v: RawNumber) => i32;
export declare const i64: (v: RawNumber) => i64;
export declare const isize: (v: RawNumber) => isize;
export declare const f32: (v: RawNumber) => f32;
export declare const f64: (v: RawNumber) => f64;
export type byte = u8;
export type short = i16;
export type int = i32;
export type long = i64;
export type uint = u32;
export type ulong = u64;
export type float = f32;
export type double = f64;
export declare function initPrimitives(): Promise<void>;
export declare function format_bin(v: u32): Str;
export declare function format_hex(v: u32): Str;
export declare function format_oct(v: u32): Str;
export declare function format_int(v: u32, radix: u8, pad: u8): Str;
export declare function format_float(v: f32, digits?: u8): Str;
export declare function is_power_of_two(v: u32): boolean;
export declare function next_power_of_two(v: u32): u32;
export declare function leading_zeros(v: u32): u32;
export declare function trailing_zeros(v: u32): u32;
export declare function count_ones(v: u32): u32;
export declare function add_u8(a: u8, b: u8): Result<u8, ValidationError>;
export declare function add_u16(a: u16, b: u16): Result<u16, ValidationError>;
export declare function add_u32(a: u32, b: u32): Result<u32, ValidationError>;
export declare function sub_u32(a: u32, b: u32): Result<u32, ValidationError>;
export declare function mul_u32(a: u32, b: u32): Result<u32, ValidationError>;
export declare function div_u32(a: u32, b: u32): Result<u32, ValidationError>;
export declare function u8_to_u16(value: u8): u16;
export declare function u8_to_u32(value: u8): u32;
export declare function u8_to_u64(value: u8): u64;
export declare function u16_to_u32(value: u16): u32;
export declare function u16_to_u64(value: u16): u64;
export declare function u32_to_u64(value: u32): u64;
export declare function i8_to_i16(value: i8): i16;
export declare function i8_to_i32(value: i8): i32;
export declare function i8_to_i64(value: i8): i64;
export declare function i16_to_i32(value: i16): i32;
export declare function i16_to_i64(value: i16): i64;
export declare function i32_to_i64(value: i32): i64;
export declare function f32_to_f64(value: f32): f64;
export declare function u8_to_i8(value: u8): Result<i8, ValidationError>;
export declare function u16_to_i16(value: u16): Result<i16, ValidationError>;
export declare function u32_to_i32(value: u32): Result<i32, ValidationError>;
export declare function i8_to_u8(value: i8): Result<u8, ValidationError>;
export declare function i16_to_u16(value: i16): Result<u16, ValidationError>;
export declare function i32_to_u32(value: i32): Result<u32, ValidationError>;
export declare function f32_to_i32(value: f32): Result<i32, ValidationError>;
export declare function f64_to_i64(value: f64): Result<i64, ValidationError>;
export declare function i32_to_f32(value: i32): f32;
export declare function i64_to_f64(value: i64): f64;
export declare const Byte: (v: RawNumber) => u8;
export declare const Short: (v: RawNumber) => i16;
export declare const Int: (v: RawNumber) => i32;
export declare const Long: (v: RawNumber) => i64;
export declare const UInt: (v: RawNumber) => u32;
export declare const ULong: (v: RawNumber) => u64;
export declare const Float: (v: RawNumber) => f32;
export declare const Double: (v: RawNumber) => f64;
export declare function to_binary(value: number): string;
export declare function to_hex(value: number): string;
export declare function to_octal(value: number): string;
export {};
